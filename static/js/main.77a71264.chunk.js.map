{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACI,yBAAKC,UAAU,mDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACG,4BAAKF,GACL,2BAAIC,MCaCK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OACC,kBAAC,EAAD,CACDC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIjB,OACA,6BACCO,ICFYK,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKZ,UAAU,OACf,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAc,gBACdC,SAAUH,MCCEI,EARA,SAACC,GACf,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,WC0CIC,G,wDAvCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZzB,OAAQ,GACNO,YAAY,IAJF,E,gEASO,IAAD,OACnBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACtB,OAAQ8B,S,+BAM7B,IAAD,EACwBC,KAAKN,MAA7BzB,EADA,EACAA,OAAQO,EADR,EACQA,YACVyB,EAAiBhC,EAAOiC,QAAO,SAAAC,GACjC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS7B,EAAY4B,kBAE1D,OAAQnC,EAAOqC,OAGJ,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAQgC,MAN7B,2C,GAzBgBM,cCNZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,MCnDjEC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SDAX,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,sBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,sBAAN,sBAEP1B,EAwCV,SAAiCO,GAE/BpB,MAAMoB,GACHnB,MAAK,SAAAC,GAGkB,MAApBA,EAASwC,SACuD,IAAhExC,EAASyC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM7C,MAAK,SAAAuB,GACjCA,EAAauB,aAAa9C,MAAK,WAC7Bc,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA5DAkB,CAAwB7B,GAGxBD,EAAgBC,OClBxB8B,I","file":"static/js/main.77a71264.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n     <div className='bg-light-blue dib br2 pa1 ma1 grow bw2 shadow-5'> \r\n       <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n       <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div> \r\n       </div> \r\n\t);\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user, i) =>{\r\n\t\treturn ( \r\n\t  <Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n\t);\r\n})\r\n  return (\r\n \t<div>\r\n \t{cardComponent}\r\n \t</div>\r\n );\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t <div className='pa2'>\t\r\n\t\t<input\r\n\t\t className='pa3 ba b--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder = 'search robots'\r\n\t\t onChange={searchChange}\r\n\t\t  />\r\n\t </div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n\treturn (\r\n     <div style={{ overflowY: 'scroll', border: '2px solid black', height: '500px' }}>\r\n\t\t  {props.children}\r\n     </div>\r\n     );\r\n};\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n constructor() {\r\n \tsuper()\r\n \tthis.state = {\r\n \t\trobots: [],\r\n\t    searchfield:''\r\n   } \r\n\r\n }\t\r\n\r\n componentDidMount() {\r\n \tfetch('https://jsonplaceholder.typicode.com/users')\r\n \t.then(response=> response.json())\r\n \t.then(users => this.setState({robots: users}));\t\r\n }\r\n onSearchChange = (event) => {\r\n \tthis.setState({ searchfield: event.target.value }) \r\n     \r\n }\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n     \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\treturn !robots.length ?\r\n\t <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\t\r\n \t           <h1 className='f1'>RoboFriends</h1>\r\n \t           <SearchBox searchChange={this.onSearchChange} />\r\n \t           <Scroll>\r\n \t           <CardList robots={filteredRobots} />\r\n \t           </Scroll>\r\n\t        </div>            \r\n \t    );\r\n  }\r\n}\r\n\r\n \r\n\r\nexport default App;","\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\n \r\nReactDOM.render(<App/>\r\n ,document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}