{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","classname","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","headers","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","message","ReactDOM","render","document","getElementById","registerServiceWorker"],"mappings":"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","file":"static/js/main.ba97188c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n     <div className='bg-light-blue dib br3 pa1 ma1 grow bw2 shadow-5'> \r\n       <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n       <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div> \r\n       </div> \r\n\t);\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user, i) =>{\r\n\t\treturn ( \r\n\t  <Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n\t);\r\n})\r\n  return (\r\n \t<div>\r\n \t{cardComponent}\r\n \t</div>\r\n );\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t <div classname='pa2'>\t\r\n\t\t<input\r\n\t\t className='pa3 ba b--grenn bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder = 'search robots'\r\n\t\t onChange={searchChange}\r\n\t\t  />\r\n\t </div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n\treturn (\r\n     <div style={{ overflowY: 'scroll', border: '2px solid black', height: '500px' }}>\r\n\t\t  {props.children}\r\n     </div>\r\n     );\r\n};\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n constructor() {\r\n \tsuper()\r\n \tthis.state = {\r\n \t\trobots: [],\r\n\t    searchfield:''\r\n   } \r\n\r\n }\t\r\n\r\n componentDidMount() {\r\n \tfetch('https://jsonplaceholder.typicode.com/users')\r\n \t.then(response=> response.json())\r\n \t.then(users => this.setState({robots: users}));\t\r\n }\r\n onSearchChange = (event) => {\r\n \tthis.setState({ searchfield: event.target.value }) \r\n     \r\n }\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n     \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\treturn !robots.length ?\r\n\t <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\t\r\n \t           <h1 className='f1'>RoboFriends</h1>\r\n \t           <SearchBox searchChange={this.onSearchChange} />\r\n \t           <Scroll>\r\n \t           <CardList robots={filteredRobots} />\r\n \t           </Scroll>\r\n\t        </div>            \r\n \t    );\r\n  }\r\n}\r\n\r\n \r\n\r\nexport default App;","\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n); \n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\n\n \nReactDOM.render(<App/>\n ,document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}